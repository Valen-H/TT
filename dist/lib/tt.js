"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tt = void 0;
var tt;
(function (tt) {
    let Act;
    (function (Act) {
        Act[Act["STOP"] = 1] = "STOP";
        Act[Act["CONT"] = 2] = "CONT";
        Act[Act["UNREG"] = 4] = "UNREG";
        Act[Act["PASS"] = 8] = "PASS";
    })(Act = tt.Act || (tt.Act = {}));
    class Pattern extends RegExp {
        pattern;
        cb = (t) => Act.CONT;
        constructor(pattern, cb) {
            if (typeof pattern == "string")
                pattern = new RegExp(pattern, "i");
            else if (pattern instanceof Pattern) {
                cb = pattern.cb;
                pattern = pattern.pattern;
            }
            else if (!(pattern instanceof RegExp))
                throw "Bad Pattern";
            super(pattern.source);
            if (cb instanceof Function)
                this.cb = cb;
            else if (cb)
                throw "Bad Callback";
            this.pattern = pattern;
        } //ctor
        get flags() {
            return this.pattern.flags;
        } //g-flags
        try(str) {
            if (this.pattern.test(str))
                return this.cb(this, str) || Act.CONT;
            return Act.PASS;
        } //test
        [Symbol.match](str) {
            const prec = str.match(this.pattern) || [];
            return prec;
        }
        [Symbol.matchAll](str) {
            const prec = str.matchAll(this.pattern);
            return prec;
        }
        static get [Symbol.species]() {
            return RegExp;
        }
    } //Pattern
    tt.Pattern = Pattern;
    class TT {
        patterns;
        constructor(patterns = []) {
            if (patterns instanceof Array)
                this.patterns = patterns.map((p) => new Pattern(p));
            else
                throw "Bad Patterns";
        } //ctor
        test(str) {
            let ret = false;
            for (let i = 0; i < this.patterns.length; i++) {
                const p = this.patterns[i], po = p.try(str);
                if ((po & Act.UNREG) == Act.UNREG) {
                    this.unreg(i--);
                    ret = true;
                }
                if ((po & Act.STOP) == Act.STOP)
                    return true;
                if ((po & Act.CONT) == Act.CONT)
                    ret = true;
            }
            return ret;
        } //test
        reg(pat, idx, rep = 0) {
            let opat;
            if (pat instanceof Array)
                opat = pat.map((p) => new Pattern(p));
            else
                opat = new Pattern(pat);
            if (opat instanceof Array) {
                if (idx && idx >= 0)
                    this.patterns.splice(idx, rep, ...opat);
                else {
                    while (rep--)
                        this.patterns.pop();
                    this.patterns.push(...opat);
                }
            }
            else {
                if (idx && idx >= 0)
                    this.patterns.splice(idx, rep, opat);
                else {
                    while (rep--)
                        this.patterns.pop();
                    this.patterns.push(opat);
                }
            }
            return opat;
        } //reg
        unreg(pat) {
            let pats = [];
            if (!pat)
                return this.patterns.splice(0, this.patterns.length);
            else if (pat instanceof Array) {
                let remn = 0;
                pat.sort((a, b) => {
                    if (a instanceof Pattern)
                        return 1;
                    else if (b instanceof Pattern)
                        return -1;
                    else
                        return a - b;
                }).forEach((p) => {
                    const idx = p instanceof Pattern ? this.patterns.findIndex((pp) => pp == p) : (p - remn);
                    if (idx >= 0)
                        pats.push(...this.patterns.splice(idx, 1));
                    if (typeof p == "number")
                        remn++;
                });
            }
            else {
                const idx = pat instanceof Pattern ? this.patterns.findIndex((pp) => pp == pat) : pat;
                if (idx >= 0)
                    pats.push(...this.patterns.splice(idx, 1));
            }
            return pats;
        } //unreg
        get [Symbol.isConcatSpreadable]() {
            return true;
        }
        *[Symbol.iterator]() {
            yield* this.patterns;
        }
    } //TT
    tt.TT = TT;
})(tt = exports.tt || (exports.tt = {})); //tt
exports.default = tt;
//# sourceMappingURL=data:application/json;base64,